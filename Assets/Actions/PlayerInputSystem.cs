//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Actions/PlayerInputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputSystem"",
    ""maps"": [
        {
            ""name"": ""Player_Input"",
            ""id"": ""3c871b13-dd43-4c55-a3b0-1727e94cd364"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""06176333-4f72-45e3-adc8-1b61372ad293"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ad1ea2ef-62a4-4d40-b658-3c017cb7106d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attacks"",
                    ""type"": ""Button"",
                    ""id"": ""34b4eac9-4839-4332-96c3-e80627e8e008"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""909622df-baf5-41b5-b4e0-0ec13453d412"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7d7358b5-e02c-4649-8a38-79927ee40ea5"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""eb22d812-5988-4970-9365-4ea8e7e5d92f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9ed2d728-d321-4482-9efb-1d6d2fb23b26"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c0c24ec0-b672-489d-a9d9-7e3019bf6a8b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a9a10586-bd56-461a-bec5-f0e8225c6048"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5a69f3d-cd38-49ee-9092-4d8be597d9c0"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attacks"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_Input
        m_Player_Input = asset.FindActionMap("Player_Input", throwIfNotFound: true);
        m_Player_Input_Movement = m_Player_Input.FindAction("Movement", throwIfNotFound: true);
        m_Player_Input_Jump = m_Player_Input.FindAction("Jump", throwIfNotFound: true);
        m_Player_Input_Attacks = m_Player_Input.FindAction("Attacks", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_Input
    private readonly InputActionMap m_Player_Input;
    private List<IPlayer_InputActions> m_Player_InputActionsCallbackInterfaces = new List<IPlayer_InputActions>();
    private readonly InputAction m_Player_Input_Movement;
    private readonly InputAction m_Player_Input_Jump;
    private readonly InputAction m_Player_Input_Attacks;
    public struct Player_InputActions
    {
        private @PlayerInputSystem m_Wrapper;
        public Player_InputActions(@PlayerInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Input_Movement;
        public InputAction @Jump => m_Wrapper.m_Player_Input_Jump;
        public InputAction @Attacks => m_Wrapper.m_Player_Input_Attacks;
        public InputActionMap Get() { return m_Wrapper.m_Player_Input; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_InputActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer_InputActions instance)
        {
            if (instance == null || m_Wrapper.m_Player_InputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player_InputActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Attacks.started += instance.OnAttacks;
            @Attacks.performed += instance.OnAttacks;
            @Attacks.canceled += instance.OnAttacks;
        }

        private void UnregisterCallbacks(IPlayer_InputActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Attacks.started -= instance.OnAttacks;
            @Attacks.performed -= instance.OnAttacks;
            @Attacks.canceled -= instance.OnAttacks;
        }

        public void RemoveCallbacks(IPlayer_InputActions instance)
        {
            if (m_Wrapper.m_Player_InputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer_InputActions instance)
        {
            foreach (var item in m_Wrapper.m_Player_InputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player_InputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player_InputActions @Player_Input => new Player_InputActions(this);
    public interface IPlayer_InputActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAttacks(InputAction.CallbackContext context);
    }
}
